"""
Django settings for guard_bot project.

Generated by 'django-admin startproject' using Django 4.1.7.

For more information on this file, see
https://docs.djangoproject.com/en/4.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.1/ref/settings/
"""
import sys
import os

import logging.config

from pathlib import Path

from environs import Env

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

TESTING = any(x in sys.argv[0] for x in ["pytest", "coverage"])

env = Env()

env.read_env(path=str(BASE_DIR.joinpath(".env.test" if TESTING else ".env")))

SECRET_KEY = env.str(name="SECRET_KEY", required=True)

DEBUG = env.bool("DEBUG")

ALLOWED_HOSTS = env.list("ALLOWED_HOSTS", [])

LANGUAGE_CODE = env.str("LANGUAGE_CODE", default="en-us")

TIME_ZONE = env.str("TIME_ZONE", default="UTC")

USE_I18N = env.bool("USE_I18N", default=True)

USE_TZ = env.bool("USE_TZ", default=True)

with env.prefixed("DB_"):
    DATABASES = {
        "default": {
            "ENGINE": "django.db.backends.postgresql",
            "NAME": env.str("NAME", required=True),
            "USER": env.str("USER", required=True),
            "PASSWORD": env.str("PASSWORD", required=True),
            "HOST": env.str("HOST", required=True),
            "PORT": env.str("PORT", required=True),
        }
    }
with env.prefixed("TG_"):
    API_ID = env.int("API_ID", required=True)
    API_HASH = env.str("API_HASH", required=True)
    BOT_TOKEN = env.str("BOT_TOKEN", required=True)
    BOT_DB = env.str("DB_NAME", required=True)
    ADMIN_GROUPS_REFRESH_PERIOD = env.int("ADMIN_GROUPS_REFRESH_PERIOD", required=True)
    BETWEEN_GROUPS_REFRESH_COOLDOWN = env.int(
        "BETWEEN_GROUPS_REFRESH_COOLDOWN", required=True
    )
    if TESTING:
        TEST_SERVER = env.str("TEST_SERVER", "")
        TEST_PORT = env.int("TEST_PORT", 0)
        TEST_DC = env.int("TEST_DC", 0)

INSTALLED_APPS = [
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    "guard_bot.bot.apps.BotConfig",
]

MIDDLEWARE = [
    "django.middleware.security.SecurityMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
]

ROOT_URLCONF = "guard_bot.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [BASE_DIR / "templates"],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]

WSGI_APPLICATION = "guard_bot.wsgi.application"

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]

STATIC_URL = "static/"

DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"

LOGGING = {
    "version": 1,
    "disable_existing_loggers": False,
    "handlers": {
        "console": {
            "class": "logging.StreamHandler",
        },
    },
    "formatters": {
        "default": {
            "format": "%(asctime)s %(name)-12s %(levelname)-8s %(message)s",
        },
    },
    "root": {
        "handlers": ["console"],
        "level": "INFO",
    },
    "loggers": {
        "": {
            "handlers": ["console"],
            "level": os.getenv("DJANGO_LOG_LEVEL", "INFO"),
            "propagate": False,
        },
    },
}
logging.config.dictConfig(LOGGING)
